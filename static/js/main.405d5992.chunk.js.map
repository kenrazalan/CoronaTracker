{"version":3,"sources":["api/index.js","components/Cards/CardComponent.js","components/Cards/Cards.js","components/country/Country.js","components/Chart/Chart.js","App.js","reportWebVitals.js","index.js","components/Chart/Chart.module.css"],"names":["api","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchCountries","countries","map","name","fetchDailyData","positive","death","date","dateChecked","CardComponent","className","cardTitle","value","subtitle","Grid","item","xs","md","component","Card","cn","CardContent","Typography","gutterBottom","variant","start","end","duration","Date","toDateString","Cards","container","spacing","justify","Wrapper","styled","div","Country","handleChange","useState","setCountry","useEffect","cc","fetchCountry","FormControl","NativeSelect","defaultValue","onChange","e","target","coun","i","Chart","dailyData","setDailyData","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","toLocaleDateString","borderColor","fill","css","charts","style","width","App","setData","response","fetchApi","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.405d5992.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst api = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async (country)=>{\r\n    let changeableUrl = api;\r\n\r\n    if(country){\r\n        changeableUrl = `${api}/countries/${country}`\r\n    }\r\n    try{\r\n        const {data:{ confirmed, recovered, deaths, lastUpdate }} = await axios.get(changeableUrl)\r\n        return{confirmed, recovered, deaths, lastUpdate}\r\n    }catch(e){\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async ()=>{\r\n    try{\r\n        const {data: {countries}} = await axios.get(`${api}/countries`)\r\n        return countries.map(country=>{\r\n            return country.name\r\n        })\r\n    }catch(e){\r\n        return e;\r\n    }\r\n}\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n      const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\r\n  \r\n      return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n","import React from 'react';\r\nimport {Card, CardContent, Grid,Typography} from '@material-ui/core'\r\nimport './CardComponent.css'\r\nimport cn from 'classnames'\r\nimport Countup from 'react-countup'\r\n\r\n const CardComponent =({className,cardTitle,value,subtitle,lastUpdate})=>{\r\n    return(\r\n        <Grid item xs={12} md={3} component={Card} className={cn(\"card\",className)}>\r\n            <CardContent>\r\n                <Typography gutterBottom>\r\n                    {cardTitle}\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                    <Countup start={0} end={value} duration={2.75}/>    \r\n                       \r\n                </Typography>\r\n                <Typography>\r\n                {new Date(lastUpdate).toDateString()}\r\n                </Typography>\r\n                <Typography>\r\n                    {subtitle}\r\n                </Typography>\r\n            </CardContent>\r\n        </Grid>\r\n    )\r\n} \r\nexport default CardComponent","import React from 'react';\r\nimport {Typography,Card,CardContent,Grid} from '@material-ui/core'\r\nimport CardComponent from './CardComponent'\r\nimport './CardComponent.css'\r\n\r\n const Cards =({data:{confirmed, recovered, deaths, lastUpdate}})=>{\r\n    if (!confirmed) {\r\n        return 'Loading...';\r\n      }\r\n    return(\r\n        <div className=\"container\">\r\n            <Typography  gutterBottom variant=\"h4\" component=\"h2\">Global</Typography>\r\n        <Grid container spacing={3} justify='center'>\r\n            \r\n            <CardComponent\r\n            className=\"infected\"\r\n            cardTitle={\"Infected\"}\r\n            value={confirmed.value}\r\n            lastUpdate={lastUpdate}\r\n            subtitle={\"Number of active cases from COVID-19.\"}\r\n            />\r\n            <CardComponent\r\n            className=\"recovered\"\r\n            cardTitle={\"Recovered\"}\r\n            value={recovered.value}\r\n            lastUpdate={lastUpdate}\r\n            subtitle={\"Number of recoveries from COVID-19.\"}\r\n            />\r\n            <CardComponent\r\n            className=\"deaths\"\r\n            cardTitle={\"Deaths\"}\r\n            value={deaths.value}\r\n            lastUpdate={lastUpdate}\r\n            subtitle={\"Number of deaths from COVID-19.\"}\r\n            />\r\n        </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards\r\n","import React, { useEffect, useState } from 'react'\r\nimport {FormControl,NativeSelect} from '@material-ui/core'\r\nimport {fetchCountries} from '../../api/index'\r\nimport styled from 'styled-components'\r\n\r\nconst Wrapper = styled.div`\r\n    .formControl{\r\n        width:\"30%\";\r\n        margin-bottom: 30px;\r\n    }\r\n`\r\n\r\nconst Country=({handleChange})=>{\r\n    const [country,setCountry] = useState([])\r\n\r\n    useEffect(()=>{\r\n        const fetchCountry = async()=>{\r\n            const cc = fetchCountries()\r\n            setCountry(await cc)\r\n        }\r\n        fetchCountry()\r\n    },[])\r\n  \r\n    return(\r\n        <Wrapper>\r\n        <FormControl className=\"formControl\">\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleChange(e.target.value) }>\r\n                <option value=\"\">World Wide </option>\r\n                 {country.map((coun,i)=> <option key={i} value={coun}>{coun}</option>)} \r\n            </NativeSelect>\r\n        </FormControl>\r\n        </Wrapper>\r\n    )\r\n} \r\n\r\nexport default Country\r\n","import React, { useEffect, useState } from 'react'\r\nimport {Line,Bar} from 'react-chartjs-2'\r\nimport {fetchDailyData} from '../../api'\r\nimport styled from 'styled-components'\r\nimport css from './Chart.module.css'\r\n// const Wrapper = styled.div`\r\n//     .chart{\r\n//         display: flex;\r\n//         justify-content: center;\r\n//         width:\"65%\";\r\n       \r\n//     }\r\n//     @media only screen and (max-width: 770px) {\r\n//   .chart {\r\n//     width: 100%;\r\n//   }\r\n// }\r\n//   `\r\n\r\nconst Chart = ({data:{confirmed, recovered, deaths, lastUpdate},country})=>{\r\n    const [dailyData,setDailyData]= useState({})\r\n\r\n    useEffect(()=>{\r\n        const fetchData =async ()=>{\r\n            const data =await fetchDailyData();\r\n            setDailyData(data)\r\n        }\r\n        fetchData()\r\n    },[])\r\n\r\n    const barChart = (\r\n        confirmed?(\r\n            <Bar data={{\r\n                labels:['Infected','Recoverd','Deaths'],\r\n                datasets:[\r\n                    {label: 'People',\r\n                    backgroundColor:\"['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)']\",\r\n                    data: [confirmed.value, recovered.value, deaths.value],\r\n                }\r\n                ]\r\n            }}\r\n            options={{\r\n                legend: {display:false},\r\n                title: {display: true , text: `Current state in ${country}` }\r\n            }}/>\r\n        ): null\r\n\r\n    )\r\n\r\n    const lineChart = (\r\n        dailyData[0] ? (\r\n          <Line\r\n            data={{\r\n              labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n              datasets: [{\r\n                data: dailyData.map((data) => data.confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n              }, {\r\n                data: dailyData.map((data) => data.deaths),\r\n                label: 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                fill: true,\r\n              },  {\r\n                data: dailyData.map((data) => data.recovered),\r\n                label: 'Recovered',\r\n                borderColor: 'green',\r\n                backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n                fill: true,\r\n              },\r\n              ],\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n            return(\r\n                <div className={css.charts} style={{width:\"65%\"}}>\r\n                    {country?barChart:lineChart}\r\n                </div>\r\n               \r\n            )\r\n\r\n}\r\n\r\nexport default Chart","import { useEffect, useState } from 'react';\nimport './App.css';\nimport {fetchData} from './api/index'\nimport Cards from './components/Cards/Cards'\nimport Country from './components/country/Country'\nimport Chart from './components/Chart/Chart'\nimport styled from 'styled-components'\n\n\n\nconst Wrapper = styled.div`\n    .App{\n       display: flex;\n       align-items: center;\n       flex-direction: column;\n    }\n    @media only screen and (max-width: 770px) {\n      .App {\n    margin: 0 10%;\n  }\n}\n  `\nfunction App() {\n  \n  const [data,setData] = useState({})\n  const [country,setCountry] = useState(\"\")\n \n  useEffect(()=>{\n    async function fetchApi(){\n      let response = await fetchData()\n      setData(response)\n    }\n    fetchApi()\n  },[])\n\n  const handleChange = async(country)=>{\n    const data = await fetchData(country)\n    setData(data)\n    setCountry(country)\n    console.log(country)\n    \n  }\n\n\n  return (\n    <Wrapper>\n    <div className=\"App\">\n      <Cards data={data}/>\n      <Country handleChange={handleChange}/>\n      <Chart data={data} country={country}/>\n    </div>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"charts\":\"Chart_charts__28kB4\",\"chart\":\"Chart_chart__1-8qV\"};"],"sourceRoot":""}